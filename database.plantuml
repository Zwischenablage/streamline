@startuml
' uncomment the line below if you're using computer with a retina display
' skinparam dpi 300
!define Table(name,desc) class name as "desc" << (T,#FFAAAA) >>
' we use bold for primary key
' green color for unique
' and underscore for not_null
!define primary_key(x) <b>x</b>
!define unique(x) <color:green>x</color>
!define not_null(x) <u>x</u>
' other tags available:
' <i></i>
' <back:COLOR></color>, where color is a color name or html color code
' (#FFAACC)
' see: http://plantuml.com/classes.html#More
hide methods
hide stereotypes
' entities


Table(customer, "customer\n(customer in our system)") {
primary_key(id) INTEGER
not_null(unique(customername)) STRING
}

Table(project, "project\n(project for user)") {
primary_key(id) INTEGER
not_null(customer_id) INTEGER
name STRING
description STRING
oracleID INTEGER
created_at DATETIME
}

Table(oem, "oem\n(oem for project)") {
primary_key(id) INTEGER
not_null(unique(oemname)) STRING
}

Table(session, "session") {
primary_key(id) INTEGER
primary_key(project_id) INTEGER
primary_key(type_id) INTEGER
finished_at DATETIME
vehicle STRING
done_by(user_Id) INTEGER
state INTEGER
paramset(paramset_id) INTEGER
}

Table(paramset, "paramset")
{
  primary_key(id) INTEGER
  productname STRING
  productversion STRING
  mode STRING
  valueset(id)
}

Table(valueset, "Value Set")
{
  primary_key(id) INTEGER
  name STRING
  short_comment STRING
  comment STRING
  values STRING
}

Table(user, "user")
{
  primary_key(id) INTEGER
  username STRING
  firstName STRING
  lastName STRING
}

Table(sessiontype, "sessiontype")
{
  primary_key(id) INTEGER
  type STRING
}

Table(product, "product")
{
  primary_key(id) INTEGER
  name STRING
}

Table(valuesetMap, "valuesetMap")
{
  primary_key(id) INTEGER
  paramset INTEGER
  valueset INTEGER
}

' relationships
' one-to-one relationship
project "1" -- "1" oem : " project has one OEM"
session "1" -- "1" sessiontype : "session type (Porting, APQM, Tuning)"
session "1" -- "1" paramset : "a session has 1 paramset"
session "1" -- "1" user : " done by"
paramset "1" -- "1" product
' one to may relationship
customer "1" --> "0..n" project : "A customer may have\n many sessions"
project "1" --> "0..n" session : "Project may have\n many sessions"
paramset "1" --> "0..n" valueset : "1 paramset may have many value sets"
' many to many relationship
' Add mark if you like
'customer "1" --> "*" user_group : "A user may be \nin many groups"
'group "1" --> "0..N" user_group : "A group may \ncontain many users"
@enduml
